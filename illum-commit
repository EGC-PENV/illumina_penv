#!/usr/bin/env python

from datetime import datetime as dt
from git import Repo
import argparse
import re

parser = argparse.ArgumentParser()
parser.add_argument('-a',"--all", action="store_true",
    help="Tell the command to automatically stage files that have been "
    "modified and deleted, but new files you have not told Git about are "
    "not affected.")
parser.add_argument('-m',"--message",help="Commit message.")
parser.add_argument("--version",help="New version number. Must be in the X.Y format.")
p = parser.parse_args()

if p.version and not re.match(r"^\d+\.\d+$",p.version):
    parser.error("--version must be in the format X.Y with only digits.")

repo = Repo('.')

tracked_list = ["version","illumina.f"]

with open("version") as f:
    old = f.read().strip()
new = p.version if p.version \
    else '.'.join(old.split('.')[:2])

new += '.' + dt.now().strftime("%gw%V.%u")
new += 'a' if new != old.split('-')[0][:-1] \
    else chr(ord(old.split('-')[0][-1])+1)

branch = repo.active_branch.name
if branch != "master":
    new += "-" + branch

for fname in tracked_list:
    with open(fname) as f:
        file_content = f.read()
    with open(fname,'w') as f:
        f.write(file_content.replace(old,new))
    repo.git.add(fname)

print(repo.git.commit(a=p.all,m=f"{new} {p.message}"))
