#  Script pour preparer une serie de modelisation illumina sur mammouth serie
#
#
#    Copyright (C) 2010  Martin Aube
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# usage makeBATCH output_script
#
#
# ===================================
#  Fixed variables for all experiments
#

if [ ! $1 ]
then outscpt="TortureMammouth"
else outscpt=$1
fi
pixsize=1000                                                               # Size of the pixel
exp_name='TATA'                                                      # Base name of the experiment
pressure='101.3'                                                           # Atm pressure of the lowest point
est_time="110"                                                             # Estimated number of hour per individual run
mna_file="srtm.pgm"                                                     # Numrerical terrain model file name
#
# ===================================
#  Vectors
#
xmin=50
xmax=100
ymin=60
ymax=120
let xm=xmin-1
let ns=0
while [ $xm -lt $xmax ]
do let xm=xm+1
   let ym=ymin-1
   while [ $ym -lt $ymax ]
   do let ym=ym+1
      let x_sites[$ns]=xm
      let y_sites[$ns]=ym
      bash find_observer_level.bash $mna_file $xm $ym > leveli.tmp
      tail -1 leveli.tmp > level.tmp
      read bidon bidon bidon bidon bidon bidon zm < level.tmp
      let z_sites[$ns]=zm
      echo $ns ${x_sites[$ns]} ${y_sites[$ns]} ${z_sites[$ns]}
      let ns=ns+1
   done
done
d_reflect=( 40 )                                                           # list of Mean light free path toward ground 
h_obstacle=( 5 )                                                        # list of subgrid obstacle height
saut_dif=( 71 )                                                            # list of 2nd scattering computing acceleration factor (ideally a prime number
r_dif=( 4000 )                                                           # list of 2nd scattering radius
elevation=( 15 90 )                                                     # list of elevation viewing angles  
azimut=( 0 45 90 135 180 225 270 315 )                                     # list of azimut viewing angles
tau=( 0.1 0.8 )                                            # list of AOD values
wav=( 550 )                                                # list of wavelength (nm)
reflect_files=( february_sur_refl_b_04.pgm  )        # list of reflectance files (w respect to wav)
mie_files=( rural_RH70_0.5500um.mie.out  )                 # list of Mie parameter files (w respect to wav)
lamp_l=( _lumlp_01.pgm  )        # list of lamp luminosity distribution files, $wav will be add before
lamp_h=( round_altlp.pgm  )                                     # list of lamp height files (w respect to lamp_l)
lamp_p=( cobrahead_fctem_01.dat )   
#
# ===================================
# begin of script
#
nmam=0
folder=`pwd`
griddir=$folder"/gridmap"
rm -f $HOME/$outscpt*
mkdir $griddir
echo $griddir
#
# accelerate computation from a subset of initial lumlp file data
ns=0
while [ $ns -lt ${#x_sites[*]} ]
do mkdir $griddir/"x"${x_sites[$ns]}"y"${y_sites[$ns]}
   echo "Site: x"${x_sites[$ns]}"y"${y_sites[$ns]}
   wl=0
   while [ $wl -lt ${#wav[*]} ]
   do  mkdir $griddir/"x"${x_sites[$ns]}"y"${y_sites[$ns]}/"wl"${wav[$wl]}
       echo "Wavelength: " ${wav[$wl]}

             cd $griddir/"x"${x_sites[$ns]}"y"${y_sites[$ns]}/"wl"${wav[$wl]}/
             mkdir original_files
             nl=0
             while [ $nl -lt ${#lamp_l[*]} ]
             do let nolp=nl+1
                if [ $nolp -lt 1000 ]
                then numlp=$nolp
                fi
                if [ $nolp -lt 100 ]
                then numlp="0"$nolp
                fi
                if [ $nolp -lt 10 ]
                then numlp="00"$nolp
                fi
                cp $folder"/"$exp_name"_"${wav[$wl]}${lamp_l[$nl]} "./"$exp_name"_lumlp_"$numlp".pgm"
                let nl=nl+1
             done
             cp -f *lumlp* original_files
             cp -f $folder"/"${reflect_files[$wl]} "./"$exp_name"_reflect.pgm"
             cp -f *_reflect* original_files



             # combine lumlp files
             listlp=`ls -1 *lumlp*.pgm`
             ls *lumlp*.pgm | grep -c "" > comblp.in
             echo $exp_name"_lumlp_recombined.pgm" >> comblp.in
             for nlp in $listlp
             do echo $nlp >> comblp.in
             done             
             cp -f $HOME/svn/illumina/trunk/bin/pgmcombine16bit .
             ./pgmcombine16bit < comblp.in
             echo $exp_name"_lumlp_"$numlp".pgm"  > varres.in
             echo $exp_name"_reflect.pgm" >> varres.in
             echo $exp_name"_lumlp_"$numlp"_new.pgm"  >> varres.in
             echo $exp_name"_reflect_new.pgm"  >> varres.in
             echo ${x_sites[$ns]} >> varres.in
             echo ${y_sites[$ns]} >> varres.in 
             echo "traitement de :"
             pwd
             cp -f $HOME/svn/illumina/trunk/bin/varres .
             ./varres 


             listpgm=`ls -1 *_new.pgm`
             for ipgm in $listpgm
             do opgm=`echo $ipgm | sed 's/_new//g'`
                mv -f $ipgm $opgm
             done
       let wl=wl+1
   done
   let ns=ns+1
done
# 
#
#
cd $folder
      ncas=0
      ns=0
      while [ $ns -lt ${#x_sites[*]} ]
      do mkdir "x"${x_sites[$ns]}"y"${y_sites[$ns]}
# echo "Observer position " $ns "("${x_sites[$ns]}"," ${y_sites[$ns]}"," ${z_sites[$ns]}")"
         
         cd "x"${x_sites[$ns]}"y"${y_sites[$ns]}
         nh=0
         while [ $nh -lt ${#h_obstacle[*]} ]
         do mkdir "ho"${h_obstacle[$nh]}  
# Obstacle height
            cd  "ho"${h_obstacle[$nh]} 
            ndr=0
            while [ $ndr -lt ${#d_reflect[*]} ]
            do mkdir "ro"${d_reflect[$ndr]}
# Mean free path
               cd "ro"${d_reflect[$ndr]}
               nsd=0
               while [ $nsd -lt ${#saut_dif[*]} ]
               do mkdir "sd"${saut_dif[$nsd]}
# 2nd scat. acceleration factor
                  cd "sd"${saut_dif[$nsd]}    
                  nrd=0
                  while [ $nrd -lt ${#r_dif[*]} ]
                  do mkdir "rd"${r_dif[$nrd]}
# 2nd scat. radius
                     cd "rd"${r_dif[$nrd]} 
                     ne=0
                     while [ $ne -lt ${#elevation[*]} ]
                     do mkdir "el"${elevation[$ne]}
# Elevation viewing angle
                        cd "el"${elevation[$ne]}
                        if [ ${elevation[$ne]} -eq 90 ]
                        then natot=1
# Pointing toward zenith
                        else natot=${#azimut[*]}
                        fi     
                        na=0
                        while [ $na -lt $natot ]
                        do mkdir "az"${azimut[$na]}
# Azimuth viewing angle                    
                           cd "az"${azimut[$na]}
                           nt=0
                           while [ $nt -lt ${#tau[*]} ]
                           do mkdir "ta"${tau[$nt]}
# Aerosol Optical Depth
                              cd "ta"${tau[$nt]}
                              wl=0
                              while [ $wl -lt ${#wav[*]} ]
                              do mkdir "wl"${wav[$wl]}
# wavelength
                                 cd "wl"${wav[$wl]}
                                 ln -s $folder"/"${mie_files[$wl]} ./
                                 nlamp=${#lamp_l[*]}
#                           
# creating illumina.in 
                                 echo "                ! Input file for ILLUMINA" > illumina.in
                                 echo  $exp_name "     ! ROOT FILE NAME (every usefull files have to begin with this)" >> illumina.in
                                 echo "                !" >> illumina.in
                                 echo $pixsize $pixsize "                ! CELL SIZE [m]" >> illumina.in
                                 echo "                !" >> illumina.in
                                 echo ${mie_files[$wl]} "              ! AEROSOL OPTICAL CROSS SECTIONS FILE [-]" >> illumina.in
                                 echo "                !" >> illumina.in
                                 echo ${r_dif[$nrd]} ${saut_dif[$nsd]} "   ! DOUBLE SCATTERING RADIUS [m] ; SCATTERING STEP [-]" >> illumina.in
                                 echo "                 ! (1=complete, 2= 2 times faster, ...)" >> illumina.in 
                                 echo ${wav[$wl]} "  ! WAVELENGTH [nm]" >> illumina.in
                                 echo $pressure "   ! GROUND LEVEL PRESSURE [kPa]"  >> illumina.in
                                 echo ${tau[$nt]} "   ! AEROSOL OPTICAL DEPTH [-]"  >> illumina.in
                                 echo ${#lamp_l[*]} "    ! NUMBER OF SOURCE TYPES [-]"  >> illumina.in
                                 echo "                !" >> illumina.in
                                 echo ${d_reflect[$ndr]} ${h_obstacle[$nh]} "   ! MAXIMUM REFLECTION RADIUS [m] ; MEAN OBSTACLE HEIGHT [m]" >> illumina.in
                                 echo "                !" >> illumina.in
                                 echo ${x_sites[$ns]} ${y_sites[$ns]} ${z_sites[$ns]}  " 1   ! OBSERVER X POSITION [cell unit] ; OBS Y POS [-] ; OBS Z POS [-] ; BEGINNING CELL ALONG THE LINE OF SIGHT (1=complete)" >> illumina.in
                                 echo "    ! (usefull in case of computer crash) (x=1 et y=1 is the south-west cell)" >> illumina.in
                                 echo ${elevation[$ne]} ${azimut[$na]} "   ! ELEVATION VIEWING ANGLE [deg] ; AZIMUTAL VIEWING ANGLE [deg]" >> illumina.in
                                 echo "   ! (0=east, 90=north, 180=west, 270=south)" >> illumina.in
                                 echo ".0001 .00001 .35 .07    ! SLIT WIDTH [m] ; PIXEL SIZE [m] ; FOCAL LENGTH [m] ; APPERTURE DIAMETER [m]" >> illumina.in
# copie de illumina dans ./
                                 ln -s $HOME/svn/illumina/trunk/bin/illumina .
#
# creation du script pour qsub dans $folder
                                 ici=`pwd`
# create batch run files for 500 jobs blocks
                                 let nmam=nmam+1
                                 let jobno=nmam/500+1
                                 outscript=$outscpt"_"$jobno
                                 echo "cd " $ici >> $HOME/$outscript
                                 echo "qsub  -q qwork@ms  ./execute" >> $HOME/$outscript
                                 echo "sleep 0.1"  >> $HOME/$outscript
                                 echo "#!/bin/csh" > $ici/execute
                                 echo "#PBS -l cput="$est_time":00:00" >> $ici/execute
                                 echo "#PBS -l walltime="$est_time":00:00" >> $ici/execute
                                 echo "#PBS -m bea" >> $ici/execute
#                                 echo "#PBS -M aubema@gmail.com" >> $ici/execute
                                 echo "cd " $ici >> $ici/execute
                                 echo "./illumina" >> $ici/execute
                                 chmod u+x $ici/execute
#                                 echo "cd " $ici >> $HOME/$outscpt
#                                 echo "bqsub -P \"command=./illumina >illumina.out\" -q qwork@ms -l walltime="$est_time":00:00" >> $HOME/$outscpt
                                 nl=0        
                                 while [ $nl -lt ${#lamp_l[*]} ]
                                 do let nolp=nl+1
                                    if [ $nolp -lt 1000 ]
                                    then numlp=$nolp
                                    fi
                                    if [ $nolp -lt 100 ]
                                    then numlp="0"$nolp
                                    fi
                                    if [ $nolp -lt 10 ]
                                    then numlp="00"$nolp
                                    fi                                    
                                    ln -s $folder"/"${lamp_h[$nl]} "./"$exp_name"_altlp_"$numlp".pgm"
                                    ln -s $folder"/"${lamp_p[$nl]} "./"$exp_name"_fctem_"$numlp".dat"
                                    let nl=nl+1
                                 done
                                 ln -s $griddir/"x"${x_sites[$ns]}"y"${y_sites[$ns]}/"wl"${wav[$wl]}/* .
# copie des autres fichiers d intrants
                                 ln -s $folder/$mna_file "./"$exp_name"_topogra.pgm"
                                 cd ..
                                 let ncas=ncas+1
                                 let wl=wl+1
                              done
                              cd ..
                              let nt=nt+1
                           done
                           cd ..
                           let na=na+1
                        done
                        cd ..
                        let ne=ne+1
                     done
                     cd ..
                     let nrd=nrd+1
                  done
                  cd ..
                  let nsd=nsd+1
               done
               cd ..
               let ndr=ndr+1
            done
            cd ..
            let nh=nh+1
         done
         cd ..
         let ns=ns+1
      done 

echo "Total number of runs:" $ncas
let timetot=est_time*ncas
echo "Total estimated CPU time required:" $timetot "Hour"
cd $folder
